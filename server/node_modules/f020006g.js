/*eslint no-console: 0, "quotes": [0, "single"], module: 0, globals:[0, "obj"]*/
/*eslint no-unused-vars: ["error", { "args": "none" }]*/
/**"f020006g": {
            "title": "Номенклатура",
            "info": "Мобильный клиент получает данные справочника номенклатуры"
        }, */
'use strict';
exports.fun = function (client, obj, db) {
	return new Promise(function (resolve, reject) {
		if (!(client.idToken)) {
			resolve({ "result": false });
			return;
		}
		let q;
		if (obj.fullsync === true) {
			q = `SELECT
						i_id,
						i_name,
						i_prn,
						i_service,
						int_id,
						i_active,
						extract(epoch from i_mtime)::integer as i_mtime
					from trade.items`;
		} else {
			q =`	SELECT
						i_id,
						i_name,
						i_prn,
						i_service,
						int_id,
						i_active,
						extract(EPOCH FROM i_mtime) :: INTEGER AS i_mtime
					FROM trade.items i
						JOIN (
							SELECT MAX(st2.st_stime) AS st_stime
							FROM trade.sync_token st2
							WHERE st2.t_id = $1 AND st2.st_table = 'f020006g' AND st2.st_result = TRUE
						) AS st ON (st.st_stime <= i.i_mtime)`;
			//resolve([{ "error": "Пока не добавленна частичная синхронизация" }]);
		}
		db.query(q, [client.t_id]).then(
			(value) => {
				db.one(`INSERT INTO trade.sync_token (t_id, st_table, st_stime, st_etime, st_result) VALUES
  						($1,'f020006g',now(),null, FALSE ) RETURNING trade.sync_token.st_id`, [client.t_id]).then(
					(st) => {
						var sync = +st.st_id;
						resolve({ "data": value, sync });
					}
					);

			});
	});
};