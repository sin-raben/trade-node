/*eslint no-console: 0, "quotes": [0, "single"], module: 0, globals:[0, "obj"]*/
/*eslint no-unused-vars: ["error", { "args": "none" }]*/
/**"f020016g": {
            "title": "Адреса",
            "info": "Мобильный клиент получает адреса для всех типов данных содержащие адреса"
        }, */
'use strict';
exports.fun = function (client, obj, db) {
	return new Promise(function (resolve, reject) {
		if (!(client.idToken)) {
			resolve({ "result": false });
			return;
		}
		var q;
		if (obj.fullsync === true) {
			q = `SELECT
					adr_id,
					any_id,
					adrt_id,
					adr_str,
					adr_geo,
					adr_json->'nominatim'->'display_name' as display_name,
					extract(epoch from adr_mtime)::integer as adr_mtime
				FROM trade.address a`;
		} else {
			q = `SELECT
					adr_id,
					any_id,
					adrt_id,
					adr_str,
					adr_geo,
					adr_json->'nominatim'->'display_name' as display_name,
					extract(epoch from adr_mtime)::integer as adr_mtime
				FROM trade.address a
				JOIN (
					SELECT MAX(st2.st_stime) AS st_stime
					FROM trade.sync_token st2
					WHERE st2.t_id = $1 AND st2.st_table = 'f020016g' AND st2.st_result = TRUE
				) AS st ON (st.st_stime <= a.adr_mtime);`;
		}
		db.query(q, [client.t_id]).then(
			(value) => {
				db.one(`INSERT INTO trade.sync_token (t_id, st_table, st_stime, st_etime, st_result) VALUES
  						($1,'f020016g',now(),null, FALSE ) RETURNING trade.sync_token.st_id`, [client.t_id]).then(
					(st) => {
						var sync = +st.st_id;
						resolve({ "data": value, sync });
					});
			});
	});
};
