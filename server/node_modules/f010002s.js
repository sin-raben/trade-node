/*eslint no-console: 0, "quotes": [0, "single"], module: 0, globals:[0, "obj"]*/
/*eslint no-unused-vars: ["error", { "args": "none" }]*/
/*"f010002s": {
            "title": "Авторизация",
            "info": "Авторизует пользователя"
        }, */
"use strict";
var crypto = require("crypto");
function makeid(lg = 1, ng = 1) {
	ng -= 1;
	let text = "";
	var possible =
		"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
	for (let i = 0; i <= ng; i++) {
		for (let i = 0; i < lg; i++)
			text += possible.charAt(
				Math.floor(Math.random() * possible.length)
			);
		if (ng > i) text += "-";
	}

	return text;
}

exports.fun = function(client, obj, db) {
	//TODO FUN authUser
	return new Promise(function(resolve, reject) {
		try {
			console.log("obj", obj);
			if (obj.result) {
				//новый ключ успешно получен, запишем его в базу
				if (client.t_key)
					db
						.none(
							`UPDATE trade.token SET t_key=$1, t_mtime=now() WHERE t_id=$2;`,
							[client.t_key, client.t_id]
						)
						.then(() => {
							client.auth = true;
							resolve({});
						});
			} else
				db
					.one(
						`SELECT t.t_id,t.t_name,t.t_key,u.u_login,u.u_pass,u.u_id from trade.token t
  							LEFT JOIN trade.users u ON t.u_id = u.u_id where t_name=$1;`,
						obj.idToken
					)
					.then(r => {
						if (r) {
							//t_id: 7, t_key: '1', u_login: 'gofman', u_pass: '1'
							//console.log("token[0]", token[0]);
							if (obj.key) {
								let md5D = crypto
									.createHmac("md5", r.t_key)
									.update(r.u_login + r.u_pass + r.t_name)
									.digest("hex");
								console.log("md5", md5D);
								if (md5D !== obj.key) {
									resolve({
										result: false,
										error:
											"ошибка авторизации, обратитесь к администратору"
									});
								}
								client.old_tkey = r.t_key;
								client.u_id = r.u_id;
								client.user = r.u_login;
								client.t_id = r.t_id;
								client.t_key = makeid(5, 4);
								resolve({
									result: true,
									newKey: client.t_key
								});
							} else {
								if (
									r.u_login === obj.authData.login &&
									r.u_pass === obj.authData.password
								) {
									client.idToken = r.t_name;
									client.user = r.u_login;
									client.t_id = r.t_id;
									resolve({
										result: true
									});
								} else {
									resolve({
										result: false
									});
								}
							}
						} else {
							resolve({ result: false });
							console.error(obj.idToken + " нет такого токена");
						}
					})
					.catch(error => {
						console.log("error1", error);
						reject(error);
					}); /**/
		} catch (err) {
			console.log("errA", err);
		}
	});
};
